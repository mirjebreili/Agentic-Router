"""Format the final response returned by the graph."""

from __future__ import annotations

import logging
from typing import Any, Dict

from langchain_core.messages import AIMessage


from ..types import AgentState

logger = logging.getLogger(__name__)



async def format_response(state: AgentState) -> Dict[str, Any]:

    """Format the response payload emitted by the workflow."""
    logger.info("Formatting final response.")

    response = state.get("response")
    if response is None:
        logger.error("`response` not found in state. Cannot format final output.")
        fallback = "Error: No response was generated by the agent."
        return {"response": fallback, "messages": [AIMessage(content=fallback)]}

    return {"response": response, "messages": [AIMessage(content=response)]}

