import logging
from typing import Dict, Any

# Set up basic logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def format_response(state: Dict[str, Any]) -> Dict[str, Any]:
    """
    Formats the final response for the user.

    This node simply extracts the `response` text from the state, which is
    then returned as the final output of the graph.

    Args:
        state: The current state of the graph, containing the `response`.

    Returns:
        A dictionary containing the final response to be output by the graph.
    """
    logger.info("Formatting final response.")

    response = state.get("response")
    if response is None:
        logger.error("`response` not found in state. Cannot format final output.")
        # This case should ideally not be reached if the graph is correctly wired.
        # Return a default error message.
        return {"response": "Error: No response was generated by the agent."}

    # The key of the returned dictionary determines the final output key.
    # We are mapping the internal 'response' field to the graph's final output.
    return {"response": response}